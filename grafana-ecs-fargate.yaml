AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate cluster with Grafana service accessible via ALB

Parameters:
  CertificateArn:
    Type: String
    Description: ARN of the SSL certificate in ACM for *.hws-gruppe.de

  GrafanaDomainName:
    Type: String
    Default: grafana.hws-gruppe.de
    Description: Domain name for Grafana access

  AzureClientId:
    Type: String
    Description: Azure AD Application Client ID
    NoEcho: true

  AzureClientSecret:
    Type: String
    Description: Azure AD Application Client Secret
    NoEcho: true

  AzureTenantId:
    Type: String
    Description: Azure AD Tenant ID

  GrafanaAdminPassword:
    Type: String
    Description: Admin password for Grafana
    NoEcho: true

  TagProject:
    Type: String
    Description: Default Tag for project

  TagOwner:
    Type: String
    Description: Default Tag for owner

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.12.0/24
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 151.189.180.250/32
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  # EFS for persistent storage
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      PerformanceMode: generalPurpose
      FileSystemTags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref EFSSecurityGroup

  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem
      PosixUser:
        Uid: 472
        Gid: 472
      RootDirectory:
        Path: /grafana
        CreationInfo:
          OwnerUid: 472
          OwnerGid: 472
          Permissions: 755

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      Configuration:
        ExecuteCommandConfiguration:
          Logging: OVERRIDE
          LogConfiguration:
            CloudWatchLogGroupName: !Ref LogGroup
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: grafana-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: grafana
          Image: grafana/grafana:latest
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: GF_AUTH_AZUREAD_ENABLED
              Value: 'true'
            - Name: GF_AUTH_AZUREAD_NAME
              Value: HWS Domain
            - Name: GF_AUTH_AZUREAD_ALLOW_SIGN_UP
              Value: 'true'
            - Name: GF_AUTH_AZUREAD_AUTO_LOGIN
              Value: 'false'
            - Name: GF_AUTH_AZUREAD_ALLOWED_ORGANIZATIONS
              Value: !Ref AzureTenantId
            - Name: GF_AUTH_AZUREAD_ALLOW_ASSIGN_GRAFANA_ADMIN
              Value: 'true'
            - Name: GF_AUTH_AZUREAD_TENANT_ID
              Value: !Ref AzureTenantId
            - Name: GF_AUTH_AZUREAD_AUTH_URL
              Value: !Sub https://login.microsoftonline.com/${AzureTenantId}/oauth2/v2.0/authorize
            - Name: GF_AUTH_AZUREAD_TOKEN_URL
              Value: !Sub https://login.microsoftonline.com/${AzureTenantId}/oauth2/v2.0/token
            - Name: GF_AUTH_AZUREAD_SCOPES
              Value: openid email profile
            - Name: GF_SERVER_ROOT_URL
              Value: !Sub https://${ApplicationLoadBalancer.DNSName}
          Secrets:
            - Name: GF_SECURITY_ADMIN_PASSWORD
              ValueFrom: !Ref GrafanaAdminPasswordSecret
            - Name: GF_AUTH_AZUREAD_CLIENT_ID
              ValueFrom: !Ref AzureClientIdSecret
            - Name: GF_AUTH_AZUREAD_CLIENT_SECRET
              ValueFrom: !Ref AzureClientSecretSecret
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:3000/healthz || exit 1
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          MountPoints:
            - SourceVolume: grafana-storage
              ContainerPath: /var/lib/grafana
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: grafana
      Volumes:
        - Name: grafana-storage
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      EnableExecuteCommand: true
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: grafana
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref AzureClientIdSecret
                  - !Ref AzureClientSecretSecret
                  - !Ref GrafanaAdminPasswordSecret

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSExecAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'

  # Secrets Manager
  AzureClientIdSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Azure AD Client ID for Grafana
      SecretString: !Ref AzureClientId
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

  AzureClientSecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Azure AD Client Secret for Grafana
      SecretString: !Ref AzureClientSecret
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner
  GrafanaAdminPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Grafana Admin Password
      SecretString: !Ref GrafanaAdminPassword
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner
  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/grafana
      RetentionInDays: 7
      Tags:
        - Key: Project
          Value: !Ref TagProject
        - Key: Owner
          Value: !Ref TagOwner

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  GrafanaURL:
    Description: Grafana URL
    Value: !Sub https://${GrafanaDomainName}